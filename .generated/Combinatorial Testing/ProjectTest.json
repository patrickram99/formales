{"name":"ProjectTest","traces":[{"name":"ProjectTest`PromptTests","location":{"uri":{"$mid":1,"path":"/c:/Users/patra/formales/parcial/ProjectTest.vdmpp","scheme":"file"},"range":[{"line":54,"character":4},{"line":54,"character":15}]},"verdict":1,"testCases":[{"id":1,"verdict":1,"sequence":[{"case":"prompt.addInstruction(mk_Token(<INSTRUCTION>, \"test instruction\"))","result":"()"},{"case":"prompt.addInstruction(mk_Token(<INSTRUCTION>, \"test instruction\"))","result":"()"},{"case":"prompt.addOutputFormat(mk_Token(<OUTPUT_FORMAT>, \"test output format\"))","result":"()"},{"case":"prompt.isValid()","result":"true"},{"case":"prompt.addContext(mk_Token(<CONTEXT>, \"test context\"))","result":"()"},{"case":"prompt.isValid()","result":"true"},{"case":"prompt.addInstruction(mk_Token(<INSTRUCTION>, \"test instruction\"))","result":"()"},{"case":"prompt.addContext(mk_Token(<CONTEXT>, \"test context\"))","result":"()"},{"case":"prompt.addExample(mk_Token(<EXAMPLE>, \"test example\"))","result":"()"},{"case":"prompt.addConstraint(mk_Token(<CONSTRAINT>, \"test constraint\"))","result":"()"},{"case":"prompt.addOutputFormat(mk_Token(<OUTPUT_FORMAT>, \"test output format\"))","result":"()"},{"case":"prompt.isValid()","result":"true"}]},{"id":2,"verdict":1,"sequence":[{"case":"prompt.addContext(mk_Token(<CONTEXT>, \"test context\"))","result":"()"},{"case":"prompt.addInstruction(mk_Token(<INSTRUCTION>, \"test instruction\"))","result":"()"},{"case":"prompt.addOutputFormat(mk_Token(<OUTPUT_FORMAT>, \"test output format\"))","result":"()"},{"case":"prompt.isValid()","result":"true"},{"case":"prompt.addContext(mk_Token(<CONTEXT>, \"test context\"))","result":"()"},{"case":"prompt.isValid()","result":"true"},{"case":"prompt.addInstruction(mk_Token(<INSTRUCTION>, \"test instruction\"))","result":"()"},{"case":"prompt.addContext(mk_Token(<CONTEXT>, \"test context\"))","result":"()"},{"case":"prompt.addExample(mk_Token(<EXAMPLE>, \"test example\"))","result":"()"},{"case":"prompt.addConstraint(mk_Token(<CONSTRAINT>, \"test constraint\"))","result":"()"},{"case":"prompt.addOutputFormat(mk_Token(<OUTPUT_FORMAT>, \"test output format\"))","result":"()"},{"case":"prompt.isValid()","result":"true"}]},{"id":3,"verdict":1,"sequence":[{"case":"prompt.addExample(mk_Token(<EXAMPLE>, \"test example\"))","result":"()"},{"case":"prompt.addInstruction(mk_Token(<INSTRUCTION>, \"test instruction\"))","result":"()"},{"case":"prompt.addOutputFormat(mk_Token(<OUTPUT_FORMAT>, \"test output format\"))","result":"()"},{"case":"prompt.isValid()","result":"true"},{"case":"prompt.addContext(mk_Token(<CONTEXT>, \"test context\"))","result":"()"},{"case":"prompt.isValid()","result":"true"},{"case":"prompt.addInstruction(mk_Token(<INSTRUCTION>, \"test instruction\"))","result":"()"},{"case":"prompt.addContext(mk_Token(<CONTEXT>, \"test context\"))","result":"()"},{"case":"prompt.addExample(mk_Token(<EXAMPLE>, \"test example\"))","result":"()"},{"case":"prompt.addConstraint(mk_Token(<CONSTRAINT>, \"test constraint\"))","result":"()"},{"case":"prompt.addOutputFormat(mk_Token(<OUTPUT_FORMAT>, \"test output format\"))","result":"()"},{"case":"prompt.isValid()","result":"true"}]},{"id":4,"verdict":1,"sequence":[{"case":"prompt.addConstraint(mk_Token(<CONSTRAINT>, \"test constraint\"))","result":"()"},{"case":"prompt.addInstruction(mk_Token(<INSTRUCTION>, \"test instruction\"))","result":"()"},{"case":"prompt.addOutputFormat(mk_Token(<OUTPUT_FORMAT>, \"test output format\"))","result":"()"},{"case":"prompt.isValid()","result":"true"},{"case":"prompt.addContext(mk_Token(<CONTEXT>, \"test context\"))","result":"()"},{"case":"prompt.isValid()","result":"true"},{"case":"prompt.addInstruction(mk_Token(<INSTRUCTION>, \"test instruction\"))","result":"()"},{"case":"prompt.addContext(mk_Token(<CONTEXT>, \"test context\"))","result":"()"},{"case":"prompt.addExample(mk_Token(<EXAMPLE>, \"test example\"))","result":"()"},{"case":"prompt.addConstraint(mk_Token(<CONSTRAINT>, \"test constraint\"))","result":"()"},{"case":"prompt.addOutputFormat(mk_Token(<OUTPUT_FORMAT>, \"test output format\"))","result":"()"},{"case":"prompt.isValid()","result":"true"}]},{"id":5,"verdict":1,"sequence":[{"case":"prompt.addOutputFormat(mk_Token(<OUTPUT_FORMAT>, \"test output format\"))","result":"()"},{"case":"prompt.addInstruction(mk_Token(<INSTRUCTION>, \"test instruction\"))","result":"()"},{"case":"prompt.addOutputFormat(mk_Token(<OUTPUT_FORMAT>, \"test output format\"))","result":"()"},{"case":"prompt.isValid()","result":"true"},{"case":"prompt.addContext(mk_Token(<CONTEXT>, \"test context\"))","result":"()"},{"case":"prompt.isValid()","result":"true"},{"case":"prompt.addInstruction(mk_Token(<INSTRUCTION>, \"test instruction\"))","result":"()"},{"case":"prompt.addContext(mk_Token(<CONTEXT>, \"test context\"))","result":"()"},{"case":"prompt.addExample(mk_Token(<EXAMPLE>, \"test example\"))","result":"()"},{"case":"prompt.addConstraint(mk_Token(<CONSTRAINT>, \"test constraint\"))","result":"()"},{"case":"prompt.addOutputFormat(mk_Token(<OUTPUT_FORMAT>, \"test output format\"))","result":"()"},{"case":"prompt.isValid()","result":"true"}]}]},{"name":"ProjectTest`BuilderTests","location":{"uri":{"$mid":1,"path":"/c:/Users/patra/formales/parcial/ProjectTest.vdmpp","scheme":"file"},"range":[{"line":87,"character":4},{"line":87,"character":16}]},"verdict":1,"testCases":[{"id":1,"verdict":1,"sequence":[{"case":"(((((builder.addInstruction(ProjectTest`inst)).addContext(ProjectTest`ctx)).addExample(ProjectTest`ex)).addConstraint(ProjectTest`cons)).addOutputFormat(ProjectTest`outf)).build()","result":"Prompt{#4, constraints:=[mk_Token(<CONSTRAINT>, \"test constraint\")], context:=[mk_Token(<CONTEXT>, \"test context\"), mk_Token(<CONTEXT>, \"test context\")], instructions:=[mk_Token(<INSTRUCTION>, \"test instruction\"), mk_Token(<INSTRUCTION>, \"test instruction\"), mk_Token(<INSTRUCTION>, \"test instruction\")], examples:=[mk_Token(<EXAMPLE>, \"test example\")], outputFormat:=[mk_Token(<OUTPUT_FORMAT>, \"test output format\"), mk_Token(<OUTPUT_FORMAT>, \"test output format\"), mk_Token(<OUTPUT_FORMAT>, \"test output format\")]}"},{"case":"((builder.addInstruction(ProjectTest`inst)).addOutputFormat(ProjectTest`outf)).build()","result":"Prompt{#4, constraints:=[mk_Token(<CONSTRAINT>, \"test constraint\")], context:=[mk_Token(<CONTEXT>, \"test context\"), mk_Token(<CONTEXT>, \"test context\")], instructions:=[mk_Token(<INSTRUCTION>, \"test instruction\"), mk_Token(<INSTRUCTION>, \"test instruction\"), mk_Token(<INSTRUCTION>, \"test instruction\")], examples:=[mk_Token(<EXAMPLE>, \"test example\")], outputFormat:=[mk_Token(<OUTPUT_FORMAT>, \"test output format\"), mk_Token(<OUTPUT_FORMAT>, \"test output format\"), mk_Token(<OUTPUT_FORMAT>, \"test output format\")]}"},{"case":"(((builder.addInstruction(ProjectTest`inst)).addContext(ProjectTest`ctx)).addOutputFormat(ProjectTest`outf)).build()","result":"Prompt{#4, constraints:=[mk_Token(<CONSTRAINT>, \"test constraint\")], context:=[mk_Token(<CONTEXT>, \"test context\"), mk_Token(<CONTEXT>, \"test context\")], instructions:=[mk_Token(<INSTRUCTION>, \"test instruction\"), mk_Token(<INSTRUCTION>, \"test instruction\"), mk_Token(<INSTRUCTION>, \"test instruction\")], examples:=[mk_Token(<EXAMPLE>, \"test example\")], outputFormat:=[mk_Token(<OUTPUT_FORMAT>, \"test output format\"), mk_Token(<OUTPUT_FORMAT>, \"test output format\"), mk_Token(<OUTPUT_FORMAT>, \"test output format\")]}"}]},{"id":2,"verdict":1,"sequence":[{"case":"(((((builder.addInstruction(ProjectTest`inst)).addContext(ProjectTest`ctx)).addExample(ProjectTest`ex)).addConstraint(ProjectTest`cons)).addOutputFormat(ProjectTest`outf)).build()","result":"Prompt{#4, constraints:=[mk_Token(<CONSTRAINT>, \"test constraint\")], context:=[mk_Token(<CONTEXT>, \"test context\")], instructions:=[mk_Token(<INSTRUCTION>, \"test instruction\"), mk_Token(<INSTRUCTION>, \"test instruction\"), mk_Token(<INSTRUCTION>, \"test instruction\")], examples:=[mk_Token(<EXAMPLE>, \"test example\"), mk_Token(<EXAMPLE>, \"test example\")], outputFormat:=[mk_Token(<OUTPUT_FORMAT>, \"test output format\"), mk_Token(<OUTPUT_FORMAT>, \"test output format\"), mk_Token(<OUTPUT_FORMAT>, \"test output format\")]}"},{"case":"((builder.addInstruction(ProjectTest`inst)).addOutputFormat(ProjectTest`outf)).build()","result":"Prompt{#4, constraints:=[mk_Token(<CONSTRAINT>, \"test constraint\")], context:=[mk_Token(<CONTEXT>, \"test context\")], instructions:=[mk_Token(<INSTRUCTION>, \"test instruction\"), mk_Token(<INSTRUCTION>, \"test instruction\"), mk_Token(<INSTRUCTION>, \"test instruction\")], examples:=[mk_Token(<EXAMPLE>, \"test example\"), mk_Token(<EXAMPLE>, \"test example\")], outputFormat:=[mk_Token(<OUTPUT_FORMAT>, \"test output format\"), mk_Token(<OUTPUT_FORMAT>, \"test output format\"), mk_Token(<OUTPUT_FORMAT>, \"test output format\")]}"},{"case":"(((builder.addInstruction(ProjectTest`inst)).addExample(ProjectTest`ex)).addOutputFormat(ProjectTest`outf)).build()","result":"Prompt{#4, constraints:=[mk_Token(<CONSTRAINT>, \"test constraint\")], context:=[mk_Token(<CONTEXT>, \"test context\")], instructions:=[mk_Token(<INSTRUCTION>, \"test instruction\"), mk_Token(<INSTRUCTION>, \"test instruction\"), mk_Token(<INSTRUCTION>, \"test instruction\")], examples:=[mk_Token(<EXAMPLE>, \"test example\"), mk_Token(<EXAMPLE>, \"test example\")], outputFormat:=[mk_Token(<OUTPUT_FORMAT>, \"test output format\"), mk_Token(<OUTPUT_FORMAT>, \"test output format\"), mk_Token(<OUTPUT_FORMAT>, \"test output format\")]}"}]},{"id":3,"verdict":1,"sequence":[{"case":"(((((builder.addInstruction(ProjectTest`inst)).addContext(ProjectTest`ctx)).addExample(ProjectTest`ex)).addConstraint(ProjectTest`cons)).addOutputFormat(ProjectTest`outf)).build()","result":"Prompt{#4, constraints:=[mk_Token(<CONSTRAINT>, \"test constraint\"), mk_Token(<CONSTRAINT>, \"test constraint\")], context:=[mk_Token(<CONTEXT>, \"test context\")], instructions:=[mk_Token(<INSTRUCTION>, \"test instruction\"), mk_Token(<INSTRUCTION>, \"test instruction\"), mk_Token(<INSTRUCTION>, \"test instruction\")], examples:=[mk_Token(<EXAMPLE>, \"test example\")], outputFormat:=[mk_Token(<OUTPUT_FORMAT>, \"test output format\"), mk_Token(<OUTPUT_FORMAT>, \"test output format\"), mk_Token(<OUTPUT_FORMAT>, \"test output format\")]}"},{"case":"((builder.addInstruction(ProjectTest`inst)).addOutputFormat(ProjectTest`outf)).build()","result":"Prompt{#4, constraints:=[mk_Token(<CONSTRAINT>, \"test constraint\"), mk_Token(<CONSTRAINT>, \"test constraint\")], context:=[mk_Token(<CONTEXT>, \"test context\")], instructions:=[mk_Token(<INSTRUCTION>, \"test instruction\"), mk_Token(<INSTRUCTION>, \"test instruction\"), mk_Token(<INSTRUCTION>, \"test instruction\")], examples:=[mk_Token(<EXAMPLE>, \"test example\")], outputFormat:=[mk_Token(<OUTPUT_FORMAT>, \"test output format\"), mk_Token(<OUTPUT_FORMAT>, \"test output format\"), mk_Token(<OUTPUT_FORMAT>, \"test output format\")]}"},{"case":"(((builder.addInstruction(ProjectTest`inst)).addConstraint(ProjectTest`cons)).addOutputFormat(ProjectTest`outf)).build()","result":"Prompt{#4, constraints:=[mk_Token(<CONSTRAINT>, \"test constraint\"), mk_Token(<CONSTRAINT>, \"test constraint\")], context:=[mk_Token(<CONTEXT>, \"test context\")], instructions:=[mk_Token(<INSTRUCTION>, \"test instruction\"), mk_Token(<INSTRUCTION>, \"test instruction\"), mk_Token(<INSTRUCTION>, \"test instruction\")], examples:=[mk_Token(<EXAMPLE>, \"test example\")], outputFormat:=[mk_Token(<OUTPUT_FORMAT>, \"test output format\"), mk_Token(<OUTPUT_FORMAT>, \"test output format\"), mk_Token(<OUTPUT_FORMAT>, \"test output format\")]}"}]}]},{"name":"ProjectTest`GrammarTests","location":{"uri":{"$mid":1,"path":"/c:/Users/patra/formales/parcial/ProjectTest.vdmpp","scheme":"file"},"range":[{"line":123,"character":4},{"line":123,"character":16}]},"verdict":1,"testCases":[{"id":1,"verdict":1,"sequence":[{"case":"grammar.addRule([<INSTRUCTION>, <OUTPUT_FORMAT>])","result":"()"},{"case":"grammar.addRule([<INSTRUCTION>, <CONTEXT>, <OUTPUT_FORMAT>])","result":"()"},{"case":"grammar.addRule(rule3)","result":"()"},{"case":"grammar.addRule(rule4)","result":"()"},{"case":"testPrompt.addInstruction(mk_Token(<INSTRUCTION>, \"test\"))","result":"()"},{"case":"testPrompt.addOutputFormat(mk_Token(<OUTPUT_FORMAT>, \"test\"))","result":"()"},{"case":"grammar.isValidPrompt(testPrompt)","result":"true"}]}]},{"name":"ProjectTest`ValidatorTests","location":{"uri":{"$mid":1,"path":"/c:/Users/patra/formales/parcial/ProjectTest.vdmpp","scheme":"file"},"range":[{"line":147,"character":4},{"line":147,"character":18}]},"verdict":1,"testCases":[{"id":1,"verdict":1,"sequence":[{"case":"validator.validate(p1)","result":"false"},{"case":"validator.validate(p2)","result":"false"},{"case":"validator.validate(p3)","result":"false"}]}]},{"name":"ProjectTest`IntegrationTests","location":{"uri":{"$mid":1,"path":"/c:/Users/patra/formales/parcial/ProjectTest.vdmpp","scheme":"file"},"range":[{"line":175,"character":4},{"line":175,"character":20}]},"verdict":1,"testCases":[{"id":1,"verdict":1,"sequence":[{"case":"grammar.addRule([<INSTRUCTION>, <CONTEXT>, <EXAMPLE>, <OUTPUT_FORMAT>])","result":"()"},{"case":"validator.validate(p)","result":"false"},{"case":"grammar.addRule([<INSTRUCTION>, <CONSTRAINT>, <OUTPUT_FORMAT>])","result":"()"},{"case":"validator.validate(p)","result":"false"}]}]}]}